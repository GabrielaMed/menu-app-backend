generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  phone         BigInt
  lat           String
  long          String
  Additional    Additional[]
  Product       Product[]
  Table_qr_code Table_qr_code[]
  Orders_card   Orders_card[]

  @@map("companies")
}

model Additional {
  id                    String                  @id @default(uuid())
  name                  String
  price                 Decimal                 @db.Decimal(50, 2)
  companyId             String
  Additional_in_Product Additional_in_Product[]

  company          Company            @relation(fields: [companyId], references: [id])
  Order_additional Order_additional[]

  @@map("additionals")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String
  price       Decimal @db.Decimal(50, 2)
  companyId   String

  Additional_in_Product Additional_in_Product[]
  Image                 Image[]
  company               Company                 @relation(fields: [companyId], references: [id])
  Order_products        Order_products[]

  @@map("products")
}

model Additional_in_Product {
  id           String @id @default(uuid())
  productId    String
  additionalId String

  product    Product    @relation(fields: [productId], references: [id])
  additional Additional @relation(fields: [additionalId], references: [id])

  @@map("additionals_in_product")
}

model Image {
  id        String @id @default(uuid())
  fileName  String
  productId String

  product Product @relation(fields: [productId], references: [id])

  @@map("images")
}

model Order_status {
  id     Int     @id @default(autoincrement()) @db.Integer
  status String  @db.VarChar(50)
  Order  Order[]

  @@map("order_status")
}

model Order {
  id            String    @id @default(uuid())
  orderStatusId Int
  total         Decimal?  @db.Decimal(7, 2)
  orderNumber   Int       @default(autoincrement()) @db.Integer
  dateTimeOrder DateTime?

  order_status Order_status @relation(fields: [orderStatusId], references: [id])

  Order_products Order_products[]
  Orders_card    Orders_card[]

  @@map("orders")
}

model Order_products {
  id          String @id @default(uuid())
  orderId     String
  productId   String
  observation String
  quantity    Int

  product          Product            @relation(fields: [productId], references: [id])
  order            Order              @relation(fields: [orderId], references: [id])
  Order_additional Order_additional[]

  @@map("order_products")
}

model Order_additional {
  id             String @id @default(uuid())
  orderproductid String
  additionalId   String
  quantity       Int

  orderProduct Order_products @relation(fields: [orderproductid], references: [id], onDelete: Cascade)
  additional   Additional     @relation(fields: [additionalId], references: [id])

  @@map("order_additionals")
}

model Table_qr_code {
  id          Int    @id @default(autoincrement()) @db.Integer
  tableNumber Int
  tableLink   String @db.VarChar(250)
  companyId   String

  company Company @relation(fields: [companyId], references: [id])

  @@map("table_qr_code")
}

model Orders_card_status {
  id          Int           @id @default(autoincrement()) @db.Integer
  status      String        @db.VarChar(50)
  Orders_card Orders_card[]

  @@map("orders_card_status")
}

model Orders_card {
  id                 Int      @id @default(autoincrement()) @db.Integer
  tableNumber        Int
  visitorUuid        String
  orderId            String
  ordersCardStatusId Int
  companyId          String
  dateTime           DateTime

  company            Company            @relation(fields: [companyId], references: [id])
  order              Order              @relation(fields: [orderId], references: [id])
  orders_card_status Orders_card_status @relation(fields: [ordersCardStatusId], references: [id])

  @@map("orders_card")
}
